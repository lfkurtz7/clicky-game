{"version":3,"sources":["components/ImageCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","index.js"],"names":["ImageCard","props","className","onClick","handleClick","id","alt","src","image","Wrapper","children","Title","App","state","images","clicked","score","highScore","shuffle","arr","i","length","randIndex","Math","floor","random","tempOne","tempTwo","found","includes","console","log","setState","localStorage","setItem","this","imagesJSON","parseInt","getItem","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"o5BAceA,MAVf,SAAmBC,GACjB,OACE,yBAAKC,UAAU,OAAOC,QAAS,kBAAIF,EAAMG,YAAYH,EAAMI,MACzD,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMI,GAAIE,IAAKN,EAAMO,W,MCDxBC,MAJf,SAAiBR,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMS,W,MCG1BC,MAJf,SAAeV,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMS,W,OC0FvBE,E,2MAtFbC,MAAQ,CACNC,OAAQ,GACRC,QAAS,GACTC,MAAO,EACPC,UAAW,G,EAObC,QAAU,SAAAC,GACR,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IAAK,CACnC,IAAIE,EAAYC,KAAKC,MAAMD,KAAKE,SAAWN,EAAIE,QAC3CK,EAAUP,EAAIC,GACdO,EAAUR,EAAIG,GAClBH,EAAIC,GAAKO,EACTR,EAAIG,GAAaI,EAEnB,OAAOP,G,EAWTf,YAAc,SAAAC,GACZ,IAAIuB,EAAQ,EAAKf,MAAME,QAAQc,SAASxB,GACxCyB,QAAQC,IAAIH,GACRA,EACF,EAAKI,SAAS,CACZjB,QAAS,GACTD,OAAQ,EAAKI,QAAQ,EAAKL,MAAMC,QAChCE,MAAO,EACPC,UAAW,EAAKJ,MAAMI,UAAY,EAAKJ,MAAMG,MAAQ,EAAKH,MAAMI,UAAY,EAAKJ,MAAMG,QACtF,kBAAMiB,aAAaC,QAAQ,YAAa,EAAKrB,MAAMI,cAEtD,EAAKe,SAAS,CACZjB,QAAQ,GAAD,mBAAM,EAAKF,MAAME,SAAjB,CAA0BV,IACjCS,OAAQ,EAAKI,QAAQ,EAAKL,MAAMC,QAChCE,MAAO,EAAKH,MAAMG,MAAQ,IACzB,kBAAMc,QAAQC,IAAI,EAAKlB,W,mFArC5BsB,KAAKH,SAAS,CAAElB,OAAQqB,KAAKjB,QAAQkB,GAAanB,UAAWoB,SAASJ,aAAaK,QAAQ,eAAiB,M,+BA4DpG,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,4BACA,kBAAC,EAAD,wBAAwBH,KAAKtB,MAAMG,MAAnC,gBAAuDmB,KAAKtB,MAAMI,WACjEkB,KAAKtB,MAAMC,OAAOyB,KAAI,SAAA/B,GAAK,OAC1B,kBAAC,EAAD,CACEJ,YAAa,EAAKA,YAClBC,GAAIG,EAAMH,GACVmC,IAAKhC,EAAMH,GACXG,MAAOA,EAAMA,gB,GAhFPiC,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.98032a89.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nfunction ImageCard(props) {\n  return (\n    <div className=\"card\" onClick={()=>props.handleClick(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.id} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport imagesJSON from \"./images.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    images: [],\n    clicked: [],\n    score: 0,\n    highScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ images: this.shuffle(imagesJSON), highScore: parseInt(localStorage.getItem(\"highScore\")) || 0 })\n  }\n\n  shuffle = arr => {\n    for (let i = 0; i < arr.length; i++) {\n      let randIndex = Math.floor(Math.random() * arr.length);\n      let tempOne = arr[i];\n      let tempTwo = arr[randIndex];\n      arr[i] = tempTwo\n      arr[randIndex] = tempOne\n    }\n    return arr\n  };\n\n  // reset = () => {\n  // let newArr = this.state.images.map(img => {\n  //   img.clicked = false;\n  //   return img\n  // });\n  // this.setState({ images: this.shuffle(newArr) }, () => console.log(this.state.images))\n  // }\n\n  handleClick = id => {\n    let found = this.state.clicked.includes(id);\n    console.log(found)\n    if (found) {\n      this.setState({\n        clicked: [],\n        images: this.shuffle(this.state.images),\n        score: 0,\n        highScore: this.state.highScore > this.state.score ? this.state.highScore : this.state.score\n      }, () => localStorage.setItem(\"highScore\", this.state.highScore))\n    } else {\n      this.setState({\n        clicked: [...this.state.clicked, id],\n        images: this.shuffle(this.state.images),\n        score: this.state.score + 1\n      }, () => console.log(this.state))\n    }\n    // let double = false;\n    // this.state.images.map(img => {\n    //   if (img.id === id) {\n    //     if (img.clicked) {\n    //       double = true\n    //     } else {\n    //       img.clicked = true\n    //     }\n    //   }\n\n    //   return img\n    // })\n    // if (double) {\n    //   this.reset();\n    //   console.log(\"Game Over\")\n    // } else {\n    //   this.setState({ images: this.shuffle(this.state.images) })\n    // }\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Matisse Clicky Game</Title> \n        <Title> Current Score: {this.state.score} High Score: {this.state.highScore}</Title>\n        {this.state.images.map(image => (\n          <ImageCard\n            handleClick={this.handleClick}\n            id={image.id}\n            key={image.id}\n            image={image.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}